Linux system:
    - kernel    
    - GNU utilities
    - application
    - graphical desktop

- job of the kernel:
    - memory managment
    - hardware managment
    - file system managment
    - process managment

- shell :
    - read instruction and convert it to something the OS would understand

- "" -> shell can substitue command
- '' -> raw string

- visual editor:
    - general notes:
        - vi it is the basic visual edior which u can use on any linux distribuation
        - it has two modes insert mode and command mode 
        - command mode has functions like save file, delete line or word, undo 
        - insert mode is the writing mode 
        - short cut:
            - change between insert and command mode
                - i -> insert mode
                - esc -> command mode
            - to save the file press:
                - strg + zz
                - esc wq!
            - to insert a new line:
                - o
            - undo:
                - u
            - delete line:
                - d
            - delete a charachter:
                - x

- administor:
    - ps -e:
        - it will show all the active process on the system 
        - ps -> would show only the process related to this terminal
    - top:
         - would show u all the process which are running + the process usage 
    - kill:
        - it is used to send signal to a process
        - the signal uses process ID 
        - kill -9 101:
            - this whould end the process (kill because u send 9) to the process which has the pid 101 

- Network:
    - NIC: network interface card
    - curl: 
        - it is used to call http and see if the page is avaliable
        - curl -O -> to download a link from the website 
    - ping:
        - it is used to see that the ip is reachable 
- FTP:
    - file transfter protocol 
    - the default port is 21 
    

- download software:
    - wget: 
        - world wide get
        - ex:
            - wget http://website.com

commands:
    - ls:
        - to show all files in the directoy use ls 
        - to show hidden file use ls -a
        - to recursive the folder ls -R
        -  to get the long name with filter ls -l my* 
        - [ab] here it is or a or b 
        - [1-9] here it is from 1 to 9
        - [!ab] does not include a or b
        - -1 : show the content of the folder every line represent file 

    - find location -name 
        - ex:
            - find . -name "ahmed"
            - find / . -name  "*.c" 

    - if the command doesnot take from standard input and u want to direct an input to it
        - find . -name="*.c" | rm -> wont work as rm doesnot accept standard input 
        - the soulution is usinf $()
            - rm $(find . -name "*.c")

    - wildcard:
        - when u are not working in grep
            - *: means everything 
            - {}: range 
                - ex:
                    - touch abc{1..8}
            - ?: one character
            - []: or 
                - ex:
                    - find . -name "abc[123]"
    - link:
        - softlink:
            - the link would point to a file with a different inode
            - by deleting the original file the data in the softlink is not accessible anymore
            - ln -s source destination
        - hardlink:
            - you create the a link with the same inode 
            - by deleting the source the data in destination remains 
            - ln source destination 

    - filter command:
        - awk:
            - general notes:
                - it has three use cases extract data, seach data and replace data
                - the arguments should be written with '' 
                - u can decide the delimiter using -F
                - using $ or print then the command should be withing {}
                - comparing or relacing then the value should be within ""
                - variables are defined using $ sign. $1 would represent colum number 1, $NF would represent the last colum
            - to get a specific colum, this example would print print the colum number 1 and 2
                - ex:
                    - awk -F, '{print $1,$2}' data.txt

            - to get the whole line with which has a sepcific word
                - ex:
                    - awk ' /wordInsideLineWhichWewant/  {print}' 
            - to get a line which has a specific field
                - ex:
                    - awk '{if($2=="ahmed") print $0;}'
            - to replace a word
                - ex:
                    - cat file | awk '{$2="me"; print $0}'

- tail -n 1:
    - read the last line in a file
- tail -n+2:
    - skip the first 2 and keep reading 
- head -2 :
    - read the first two line in a file


    - touch:
        - to create a file use 
    - cp:
        - to copy a file
        - cp -R /folder/ /anotherFolder

    - mv:
        - to move file 

    - mkdir -p :
        - to make parent directory and child directory 
    - rm:
        - it is used remove 
        - rm -r file 

- kill:
    - send signal tp process based on PID 
    - defualt send TERM signal
    - ex:   
        - kill 3490
- killall:
    - send singal based on name

- mount:
    - if u are not using disturbuation u have to do mount and unmout ur self
    - mount by itself would show the mounted devices on the system
    - mount -t type -o option1,option2 src foldertoMountOn

- umount:
    - unmout device 

- echo:
    - '' or "" to make the string is processed as string not as a special character
- cat:
    - write the data which is from standard input to standard output
    - if u write cat > nameofFile and then command strg+D the data would be written to the file

- date:
    - would tell the time

- wc file:
    would print number of lines, words, character

- if statment:
    - if u want the command to run only if the previous command worked
        - cmd1 && cmd2 && cmd3
    - to run the command if the previous failed
        - cmd1 || cmd2 || cmd3
        - cmd || {echo "failed command"; exit 1}
    using if:
    - one way:
        if condition
        then 
            command 
        elif condition
        then    
            command
        else 
            command 
        fi
    - another way:
        if condition; then command ; fi
    
    - another way:
        cmd && another command

    comparison u have to give space between bracket [ $x1 -eq $x2 ]:
        -eq -ne -le -ge -gt -lt 
        if [ 1 le 2 ] 
        then 
    - working with string:
        -n means not empty
        -z means empty
        -d directory
        -f file
        -e exits
    - [[ $var = r* ]]
        - u can use double bracket to support regular expression

    - if [[ x = "$pwd"]]
        - "" to make the output single word
    - if u want to user pattern also use ""
        if [[ "${myvar}" == "*.jpg"]]

- to get user input use $1, $2, $3 so on

- to create subshell use ():
    (cd ..; pwd) -> wont change the currnt directory

- std input output:
    - input output redirect:
        - < input 
        - > output
        - n>& : standard output to n 
            ex: 2>& stndard error to standard output 
        - n<& : standard input to n
        - n>&m -> output m to n
        - 1>file.txt:
            direct standard out to file
        
        - to direct error and output to file
            - cmd >& outfile

        - somecmd > my.file 2>&1
            - standard output to file and then standard error to standartd output which is file
        - somecmd 2>&1 >my.file
            - standard error to standard output which is screen. standard output to file means error still 
            would be sent to the screen
        - pipes are exceptions
            - somecmd 2>& | anothercommand

- string operator:
    - ${varname-:default} -> if the value exit return it otherwise return default
    - ${2-:10} -> return the second parameter pf 10
    - ${varname:=defult} -> if the value exit return it otherwise set it to default an return it"s value
    - ${varname:+ default} -> if exists return default otherwise return null
    - ${var:start:length} -> returnt the string starting from start whith the length
    - ${var#expression} : first match from left return the rest
    - ${var##expression} : the last match from left return rest
    - ${var%expression} : first match from right return the rest 
    - ${var%%expression} : the last match from right return the rest 
    - newname="${name%old}new"

- vaiables:
    - to show the enviroment variables:
        - printenv : would show all the variable 

    - var1=value1:
        - to set local variable in a process
        - x=12 -> np space around = is allowed
    - $var1:
        - to read the the variable

    - $PATH:
        - directory where the linux search for command
        - to add extra PATH
            - PATH=$PATH:/newpath/..
        - u can add the current path to the $PATH so u dont want always need to use ./
            PATH="$PATH:."

    - to make the file exectuable:
        chmod +x nameOfFile

- calling scripts:
    - to get the output from script in another script use x = $(script)
        - testing=$(date)
    - $? :
        - to get the exit value of the last script
        - exit 123
    - "$@" "$*":
        - all input argument to exectuable
    - "$#":
        - numbers of command lines variables


    - seperatre variable name from the surroouding string  
        var=ahmed
        - x = ${var}_ali --> x is ahmed_ali 
- read:
    - if u only write read it would get the input from the user and store it in var called REPLY
    - using -p would show the question on the screen and store the answer in variable after the ""
- sed:
    - s = substitue, i = insert before, a = insert after , -n /p to print the mathced lines
    - stream editor to change data
    - it apply command to standard input 
    - sed option script file 
    - sed "s/oldword/newword/"
    - u can give a file to a sed
    - sed "s/old/new/" file.txt
    - to make more than one substitue option 
        sed -e "s/old1/new/1; s/old2/new2/" data.txt
    - to make global substitue per line 
        - sed "s/old/new/g" file.txt
    - to select the line which u would substitue
        - sed "2,3s/old/new/" -> would apply only to line 2 and 3
    - to skip character use \
        - sed "s/\/etc\/pass/\/newetc\/newpassword/"
    - to delete a specifie line use d which delete the whole line  
        - sed "/old/d" -> remember there is no s at the begining 
    - to delete any lines between lines
        - sed "/startmatch/,/stopmatch/d"
    - to append data use i  
        sed -i "s/old/new/" file.txt^
    - sed -n "/expression/p"

- awk:
    - print first word of each line
        awk '{print $1}' file  -> it should be single ' not " 
    - to change seperator:
        awk -F, or awk -F- -> change seperator to , or - 

- regular expression:
    - ^start :start with matches if the pattern at the begining of the line 
        ^ahmed : if ahmed at the begining of the line matches it 
    - end$ : end with
    - ^$ : empty lines
    - . : any character
        r. : matches ra 
        .x. : matches axb

    - [] : or and it represent one character
    - [^] : not character
    - [1-9] : range
    - *: means the character before it should appear at least one time
        - sed -n "/th*dfs"/p -> h here is optional
    - [1-9]* : match numbers with undefined length
    
    - [0-9]\{1,\3} : matches if the number repeated from 1 to 3 times
    - [0-9]\{2\} : matches if it is repeated at exactly two times
    - ^.\{10\} : has 10 char or more
    - if u added coma means at least this number
    - \{5,\} : at least 5 chars
    - + means at least one
    - ? zero or one means any single character or nothing
        ex:
            program.c program.o program.log
            program.? matches program.c program.o 
    - to work on the line after the line u found 
        - sed "/header/{n ; d}" data1.txt
    {1..9}:
        - means the number from 1 to 9 1 2 3 .. 9
        - echo {1..9}
        - ls *.{zip,pkg}
    - span of character:
        *+?:
            - * : 11*0 : 10 110 11110 1111110
        - | : 
            - or
            - linux|unix 
        - () :
            - group the pattern
            - (yes|Yes) 
            - u can reference it using \n where n is from 1 to 9
            - echo `echo "$*" | sed "s/<[^>]*>\([^<]*\)<.*/\1/" | sed "s/ ..:..:..//g"`
         
- grep:
    - print the matched expression
    - grep -i : case insenstive
    - grep -v : not match
    - grep "expression" file
    - -E to use regular expression
    - search for pattern
    - grep options pattern file 
    - grep -v :
        - show lines which do not match the pattern  
    - to specifiy more than one match use -e more than one time
        - grep -e abdel -e ahmed file.txt

- to execute math use (()):
    - va=$((1+1))
    - no need to use $ inside the (()) as it is included in the outter ()

- Signals:
    - SIGKILL = 9 = uncondiotional kill

- initProcess:
    - kernel creates the first process called init and run it
    - process which might start automatically are in some locations
        - first option is: /etc/inittabs 
        - /etc/init.d folder contain scripts which would start at the begining of the system
        - scripts are started via entries under /etc/rcX.d  

- read command:
    - read each line
    - cat file | while read ln ; do "${ln}"; done

- cut:
    - it remove part of the text 
    ls -l | cut c1-4 -> get the character from 1 to 4

- to substitue character using tr
    - ls -l | tr "a-z" "A-Z"
